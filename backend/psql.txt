CREATE TABLE turnos (
    ID SERIAL PRIMARY KEY,
    DNI INTEGER NOT NULL,
    DESTINO VARCHAR(10) NOT NULL,
    CREADO_A TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    ESTADO VARCHAR(10) NOT NULL,
    CONSTRAINT chk_dni CHECK (DNI BETWEEN 10000000 AND 99999999),
    CONSTRAINT chk_destino CHECK (DESTINO IN ('TECNICA', 'PAGO', 'CONSULTA')),
    CONSTRAINT chk_estado
    CHECK (estado IN ('LLAMANDO', 'EN ESPERA', 'ATENDIDO', 'LLAMANDO DE BOX 1'));
);

    CONSTRAINT chk_estado CHECK (ESTADO IN ('LISTO', 'PENDIENTE', 'ATENDIENDO', 'LLAMANDO_PAGO_1', 'LLAMANDO_PAGO_2', 'LLAMANDO_PAGO_3', 'LLAMANDO_TECNICA_1', 'LLAMANDO_TECNICA_2', 'LLAMANDO_CONSULTA_1','LLAMANDO_CONSULTA_3','LLAMANDO_CONSULTA_3'));

document.getElementById('formulario-turno').addEventListener('submit', (e) => {
    e.preventDefault(); // Evita el envío del formulario por defecto
    
    const dni = document.getElementById('dni').value;
    const destino = document.getElementById('destino').value;
    
    crearTurno(dni, destino); // Llama a la función para crear el turno
    });
<div>
    <form id="formulario-turno">
    <input type="text" id="dni" placeholder="DNI" required>
    <select id="destino" required>
        <option value="TECNICA">Técnica</option>
        <option value="PAGO">Pago</option>
        <option value="CONSULTA">Consulta</option>
    </select>
    <button type="submit">Crear Turno</button>
    </form>
</div>




const getTurnosByDestinoComentarios = async (destino) => {
    try {
      return await handleDatabaseQuery(
        'SELECT * FROM turnos WHERE DESTINO = $1 AND ESTADO = $2 AND comentario IS NOT NULL ORDER BY CREADO_A ASC',
        [destino, 'LISTO']
      );
    } catch (error) {
      throw new Error(`Error fetching turnos for destino ${destino}`);
    }
  };
  // Consulta para "Técnica"
  socket.on('getUsuarioTecnica', async () => {
    try {
      const turnos = await getTurnosByDestinoComentarios('TECNICA');
      socket.emit('respuestaResponderTurnoConsulta', turnos);
    } catch (error) {
      socket.emit('error', 'Error fetching turnos de tecnica');
    }
  });
  
  // Consulta para "Pagos"
  socket.on('getUsuarioPagos', async () => {
    try {
      const turnos = await getTurnosByDestinoComentarios('PAGO');
      socket.emit('respuestaResponderTurnoPago', turnos);
    } catch (error) {
      socket.emit('error', 'Error fetching turnos de pagos');
    }
  });
  
  // Consulta para "Consulta"
  socket.on('getUsuarioConsulta', async () => {
    try {
      const turnos = await getTurnosByDestinoComentarios('CONSULTA');
      socket.emit('respuestaResponderTurnoTecnica', turnos); 
    } catch (error) {
      socket.emit('error', 'Error fetching turnos de consulta');
    }
  });


  socket.on('actualizarEstadoDelTurnoListo', async (body) => {
    const { id, ESTADO } = body;
    try {
      const turnoActualizado = await handleDatabaseQuery(
        'UPDATE turnos SET ESTADO = $1, creado_a = NOW() WHERE id = $2 RETURNING *',
        [ESTADO, id]
      );
      socket.emit('respuestaActualizarEstadoListo', turnoActualizado);
    } catch (error) {
      socket.emit('error', 'Error actualizando el estado del turno');
    }
  });
  